/*
 * Generated by gdbus-codegen 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GEOCLUE_INTERFACE_H__
#define __GEOCLUE_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Manager */

#define GCLUE_TYPE_MANAGER (gclue_manager_get_type ())
#define GCLUE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER, GClueManager))
#define GCLUE_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER))
#define GCLUE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GCLUE_TYPE_MANAGER, GClueManagerIface))

struct _GClueManager;
typedef struct _GClueManager GClueManager;
typedef struct _GClueManagerIface GClueManagerIface;

struct _GClueManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_agent) (
    GClueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_client) (
    GClueManager *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_available_accuracy_level) (GClueManager *object);

  gboolean  (*get_in_use) (GClueManager *object);

};

GType gclue_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gclue_manager_interface_info (void);
guint gclue_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gclue_manager_complete_get_client (
    GClueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client);

void gclue_manager_complete_add_agent (
    GClueManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gclue_manager_call_get_client (
    GClueManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_manager_call_get_client_finish (
    GClueManager *proxy,
    gchar **out_client,
    GAsyncResult *res,
    GError **error);

gboolean gclue_manager_call_get_client_sync (
    GClueManager *proxy,
    gchar **out_client,
    GCancellable *cancellable,
    GError **error);

void gclue_manager_call_add_agent (
    GClueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_manager_call_add_agent_finish (
    GClueManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gclue_manager_call_add_agent_sync (
    GClueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gclue_manager_get_in_use (GClueManager *object);
void gclue_manager_set_in_use (GClueManager *object, gboolean value);

guint gclue_manager_get_available_accuracy_level (GClueManager *object);
void gclue_manager_set_available_accuracy_level (GClueManager *object, guint value);


/* ---- */

#define GCLUE_TYPE_MANAGER_PROXY (gclue_manager_proxy_get_type ())
#define GCLUE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxy))
#define GCLUE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxyClass))
#define GCLUE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxyClass))
#define GCLUE_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER_PROXY))
#define GCLUE_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_MANAGER_PROXY))

typedef struct _GClueManagerProxy GClueManagerProxy;
typedef struct _GClueManagerProxyClass GClueManagerProxyClass;
typedef struct _GClueManagerProxyPrivate GClueManagerProxyPrivate;

struct _GClueManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GClueManagerProxyPrivate *priv;
};

struct _GClueManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gclue_manager_proxy_get_type (void) G_GNUC_CONST;

void gclue_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueManager *gclue_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GClueManager *gclue_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gclue_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueManager *gclue_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GClueManager *gclue_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GCLUE_TYPE_MANAGER_SKELETON (gclue_manager_skeleton_get_type ())
#define GCLUE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeleton))
#define GCLUE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeletonClass))
#define GCLUE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeletonClass))
#define GCLUE_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER_SKELETON))
#define GCLUE_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_MANAGER_SKELETON))

typedef struct _GClueManagerSkeleton GClueManagerSkeleton;
typedef struct _GClueManagerSkeletonClass GClueManagerSkeletonClass;
typedef struct _GClueManagerSkeletonPrivate GClueManagerSkeletonPrivate;

struct _GClueManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GClueManagerSkeletonPrivate *priv;
};

struct _GClueManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gclue_manager_skeleton_get_type (void) G_GNUC_CONST;

GClueManager *gclue_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Client */

#define GCLUE_TYPE_CLIENT (gclue_client_get_type ())
#define GCLUE_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_CLIENT, GClueClient))
#define GCLUE_IS_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_CLIENT))
#define GCLUE_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GCLUE_TYPE_CLIENT, GClueClientIface))

struct _GClueClient;
typedef struct _GClueClient GClueClient;
typedef struct _GClueClientIface GClueClientIface;

struct _GClueClientIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_start) (
    GClueClient *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    GClueClient *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_active) (GClueClient *object);

  const gchar * (*get_desktop_id) (GClueClient *object);

  guint  (*get_distance_threshold) (GClueClient *object);

  const gchar * (*get_location) (GClueClient *object);

  guint  (*get_requested_accuracy_level) (GClueClient *object);

  void (*location_updated) (
    GClueClient *object,
    const gchar *arg_old,
    const gchar *arg_new);

};

GType gclue_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gclue_client_interface_info (void);
guint gclue_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gclue_client_complete_start (
    GClueClient *object,
    GDBusMethodInvocation *invocation);

void gclue_client_complete_stop (
    GClueClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gclue_client_emit_location_updated (
    GClueClient *object,
    const gchar *arg_old,
    const gchar *arg_new);



/* D-Bus method calls: */
void gclue_client_call_start (
    GClueClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_client_call_start_finish (
    GClueClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gclue_client_call_start_sync (
    GClueClient *proxy,
    GCancellable *cancellable,
    GError **error);

void gclue_client_call_stop (
    GClueClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_client_call_stop_finish (
    GClueClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gclue_client_call_stop_sync (
    GClueClient *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gclue_client_get_location (GClueClient *object);
gchar *gclue_client_dup_location (GClueClient *object);
void gclue_client_set_location (GClueClient *object, const gchar *value);

guint gclue_client_get_distance_threshold (GClueClient *object);
void gclue_client_set_distance_threshold (GClueClient *object, guint value);

const gchar *gclue_client_get_desktop_id (GClueClient *object);
gchar *gclue_client_dup_desktop_id (GClueClient *object);
void gclue_client_set_desktop_id (GClueClient *object, const gchar *value);

guint gclue_client_get_requested_accuracy_level (GClueClient *object);
void gclue_client_set_requested_accuracy_level (GClueClient *object, guint value);

gboolean gclue_client_get_active (GClueClient *object);
void gclue_client_set_active (GClueClient *object, gboolean value);


/* ---- */

#define GCLUE_TYPE_CLIENT_PROXY (gclue_client_proxy_get_type ())
#define GCLUE_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_CLIENT_PROXY, GClueClientProxy))
#define GCLUE_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_CLIENT_PROXY, GClueClientProxyClass))
#define GCLUE_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_CLIENT_PROXY, GClueClientProxyClass))
#define GCLUE_IS_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_CLIENT_PROXY))
#define GCLUE_IS_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_CLIENT_PROXY))

typedef struct _GClueClientProxy GClueClientProxy;
typedef struct _GClueClientProxyClass GClueClientProxyClass;
typedef struct _GClueClientProxyPrivate GClueClientProxyPrivate;

struct _GClueClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GClueClientProxyPrivate *priv;
};

struct _GClueClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType gclue_client_proxy_get_type (void) G_GNUC_CONST;

void gclue_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueClient *gclue_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GClueClient *gclue_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gclue_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueClient *gclue_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GClueClient *gclue_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GCLUE_TYPE_CLIENT_SKELETON (gclue_client_skeleton_get_type ())
#define GCLUE_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_CLIENT_SKELETON, GClueClientSkeleton))
#define GCLUE_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_CLIENT_SKELETON, GClueClientSkeletonClass))
#define GCLUE_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_CLIENT_SKELETON, GClueClientSkeletonClass))
#define GCLUE_IS_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_CLIENT_SKELETON))
#define GCLUE_IS_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_CLIENT_SKELETON))

typedef struct _GClueClientSkeleton GClueClientSkeleton;
typedef struct _GClueClientSkeletonClass GClueClientSkeletonClass;
typedef struct _GClueClientSkeletonPrivate GClueClientSkeletonPrivate;

struct _GClueClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GClueClientSkeletonPrivate *priv;
};

struct _GClueClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gclue_client_skeleton_get_type (void) G_GNUC_CONST;

GClueClient *gclue_client_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Location */

#define GCLUE_TYPE_LOCATION (gclue_location_get_type ())
#define GCLUE_LOCATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_LOCATION, GClueLocation))
#define GCLUE_IS_LOCATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_LOCATION))
#define GCLUE_LOCATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GCLUE_TYPE_LOCATION, GClueLocationIface))

struct _GClueLocation;
typedef struct _GClueLocation GClueLocation;
typedef struct _GClueLocationIface GClueLocationIface;

struct _GClueLocationIface
{
  GTypeInterface parent_iface;

  gdouble  (*get_accuracy) (GClueLocation *object);

  gdouble  (*get_altitude) (GClueLocation *object);

  const gchar * (*get_description) (GClueLocation *object);

  gdouble  (*get_latitude) (GClueLocation *object);

  gdouble  (*get_longitude) (GClueLocation *object);

};

GType gclue_location_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gclue_location_interface_info (void);
guint gclue_location_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gdouble gclue_location_get_latitude (GClueLocation *object);
void gclue_location_set_latitude (GClueLocation *object, gdouble value);

gdouble gclue_location_get_longitude (GClueLocation *object);
void gclue_location_set_longitude (GClueLocation *object, gdouble value);

gdouble gclue_location_get_accuracy (GClueLocation *object);
void gclue_location_set_accuracy (GClueLocation *object, gdouble value);

gdouble gclue_location_get_altitude (GClueLocation *object);
void gclue_location_set_altitude (GClueLocation *object, gdouble value);

const gchar *gclue_location_get_description (GClueLocation *object);
gchar *gclue_location_dup_description (GClueLocation *object);
void gclue_location_set_description (GClueLocation *object, const gchar *value);


/* ---- */

#define GCLUE_TYPE_LOCATION_PROXY (gclue_location_proxy_get_type ())
#define GCLUE_LOCATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_LOCATION_PROXY, GClueLocationProxy))
#define GCLUE_LOCATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_LOCATION_PROXY, GClueLocationProxyClass))
#define GCLUE_LOCATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_LOCATION_PROXY, GClueLocationProxyClass))
#define GCLUE_IS_LOCATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_LOCATION_PROXY))
#define GCLUE_IS_LOCATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_LOCATION_PROXY))

typedef struct _GClueLocationProxy GClueLocationProxy;
typedef struct _GClueLocationProxyClass GClueLocationProxyClass;
typedef struct _GClueLocationProxyPrivate GClueLocationProxyPrivate;

struct _GClueLocationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GClueLocationProxyPrivate *priv;
};

struct _GClueLocationProxyClass
{
  GDBusProxyClass parent_class;
};

GType gclue_location_proxy_get_type (void) G_GNUC_CONST;

void gclue_location_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueLocation *gclue_location_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GClueLocation *gclue_location_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gclue_location_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueLocation *gclue_location_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GClueLocation *gclue_location_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GCLUE_TYPE_LOCATION_SKELETON (gclue_location_skeleton_get_type ())
#define GCLUE_LOCATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_LOCATION_SKELETON, GClueLocationSkeleton))
#define GCLUE_LOCATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_LOCATION_SKELETON, GClueLocationSkeletonClass))
#define GCLUE_LOCATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_LOCATION_SKELETON, GClueLocationSkeletonClass))
#define GCLUE_IS_LOCATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_LOCATION_SKELETON))
#define GCLUE_IS_LOCATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_LOCATION_SKELETON))

typedef struct _GClueLocationSkeleton GClueLocationSkeleton;
typedef struct _GClueLocationSkeletonClass GClueLocationSkeletonClass;
typedef struct _GClueLocationSkeletonPrivate GClueLocationSkeletonPrivate;

struct _GClueLocationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GClueLocationSkeletonPrivate *priv;
};

struct _GClueLocationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gclue_location_skeleton_get_type (void) G_GNUC_CONST;

GClueLocation *gclue_location_skeleton_new (void);


G_END_DECLS

#endif /* __GEOCLUE_INTERFACE_H__ */
