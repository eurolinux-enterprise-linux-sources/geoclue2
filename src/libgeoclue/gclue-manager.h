/*
 * Generated by gdbus-codegen 2.50.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GCLUE_MANAGER_H__
#define __GCLUE_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.GeoClue2.Manager */

#define GCLUE_TYPE_MANAGER (gclue_manager_get_type ())
#define GCLUE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER, GClueManager))
#define GCLUE_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER))
#define GCLUE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GCLUE_TYPE_MANAGER, GClueManagerIface))

struct _GClueManager;
typedef struct _GClueManager GClueManager;
typedef struct _GClueManagerIface GClueManagerIface;

struct _GClueManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_agent) (
    GClueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_client) (
    GClueManager *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_available_accuracy_level) (GClueManager *object);

  gboolean  (*get_in_use) (GClueManager *object);

};

GType gclue_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gclue_manager_interface_info (void);
guint gclue_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gclue_manager_complete_get_client (
    GClueManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client);

void gclue_manager_complete_add_agent (
    GClueManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gclue_manager_call_get_client (
    GClueManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_manager_call_get_client_finish (
    GClueManager *proxy,
    gchar **out_client,
    GAsyncResult *res,
    GError **error);

gboolean gclue_manager_call_get_client_sync (
    GClueManager *proxy,
    gchar **out_client,
    GCancellable *cancellable,
    GError **error);

void gclue_manager_call_add_agent (
    GClueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gclue_manager_call_add_agent_finish (
    GClueManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gclue_manager_call_add_agent_sync (
    GClueManager *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gclue_manager_get_in_use (GClueManager *object);
void gclue_manager_set_in_use (GClueManager *object, gboolean value);

guint gclue_manager_get_available_accuracy_level (GClueManager *object);
void gclue_manager_set_available_accuracy_level (GClueManager *object, guint value);


/* ---- */

#define GCLUE_TYPE_MANAGER_PROXY (gclue_manager_proxy_get_type ())
#define GCLUE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxy))
#define GCLUE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxyClass))
#define GCLUE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_MANAGER_PROXY, GClueManagerProxyClass))
#define GCLUE_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER_PROXY))
#define GCLUE_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_MANAGER_PROXY))

typedef struct _GClueManagerProxy GClueManagerProxy;
typedef struct _GClueManagerProxyClass GClueManagerProxyClass;
typedef struct _GClueManagerProxyPrivate GClueManagerProxyPrivate;

struct _GClueManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GClueManagerProxyPrivate *priv;
};

struct _GClueManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gclue_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GClueManagerProxy, g_object_unref)
#endif

void gclue_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueManager *gclue_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GClueManager *gclue_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gclue_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GClueManager *gclue_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GClueManager *gclue_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GCLUE_TYPE_MANAGER_SKELETON (gclue_manager_skeleton_get_type ())
#define GCLUE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeleton))
#define GCLUE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeletonClass))
#define GCLUE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GCLUE_TYPE_MANAGER_SKELETON, GClueManagerSkeletonClass))
#define GCLUE_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GCLUE_TYPE_MANAGER_SKELETON))
#define GCLUE_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GCLUE_TYPE_MANAGER_SKELETON))

typedef struct _GClueManagerSkeleton GClueManagerSkeleton;
typedef struct _GClueManagerSkeletonClass GClueManagerSkeletonClass;
typedef struct _GClueManagerSkeletonPrivate GClueManagerSkeletonPrivate;

struct _GClueManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GClueManagerSkeletonPrivate *priv;
};

struct _GClueManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gclue_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GClueManagerSkeleton, g_object_unref)
#endif

GClueManager *gclue_manager_skeleton_new (void);


G_END_DECLS

#endif /* __GCLUE_MANAGER_H__ */
